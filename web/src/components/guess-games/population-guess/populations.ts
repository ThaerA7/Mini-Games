// components/guess-games/population-guess/populations.ts
export type Pop = {
  code: string; // ISO 3166-1 alpha-2
  population: number; // whole number of people
};

// NOTE: Populations are rough 2024â€“2025 estimates. Tweak as you like.
// Add more rows anytime; the game auto-includes only countries present here.
export const POPULATIONS: Pop[] = [
  { code: "CN", population: 1412000000 },
  { code: "IN", population: 1417000000 },
  { code: "US", population: 334000000 },
  { code: "ID", population: 279000000 },
  { code: "BR", population: 203000000 },
  { code: "PK", population: 241000000 },
  { code: "NG", population: 227000000 },
  { code: "BD", population: 172000000 },
  { code: "RU", population: 146000000 },
  { code: "MX", population: 129000000 },
  { code: "JP", population: 124000000 },
  { code: "ET", population: 127000000 },
  { code: "PH", population: 118000000 },
  { code: "EG", population: 112000000 },
  { code: "VN", population: 100000000 },
  { code: "CD", population: 111000000 },
  { code: "TR", population: 86200000 },
  { code: "IR", population: 89000000 },
  { code: "DE", population: 84300000 },
  { code: "TH", population: 71600000 },
  { code: "GB", population: 68200000 },
  { code: "FR", population: 68100000 },
  { code: "IT", population: 58800000 },
  { code: "ZA", population: 61000000 },
  { code: "KE", population: 55800000 },
  { code: "ES", population: 48600000 },
  { code: "UA", population: 37600000 },
  { code: "CO", population: 52000000 },
  { code: "TZ", population: 67400000 },
  { code: "AR", population: 45700000 },
  { code: "PL", population: 37500000 },
  { code: "CA", population: 41200000 },
  { code: "MA", population: 37600000 },
  { code: "UG", population: 48900000 },
  { code: "IQ", population: 45500000 },
  { code: "SD", population: 46400000 },
  { code: "SA", population: 36000000 },
  { code: "AF", population: 42000000 },
  { code: "NP", population: 30100000 },
  { code: "PE", population: 34300000 },
  { code: "MY", population: 34000000 },
  { code: "UZ", population: 36000000 },
  { code: "AO", population: 36500000 },
  { code: "VE", population: 28900000 },
  { code: "GH", population: 34000000 },
  { code: "YE", population: 33600000 },
  { code: "MG", population: 30500000 },
  { code: "AU", population: 26500000 },
  { code: "KR", population: 51600000 },
  { code: "SY", population: 23200000 },
  { code: "CL", population: 19500000 },
  { code: "RO", population: 19100000 },
  { code: "KZ", population: 20000000 },
  { code: "ZM", population: 20500000 },
  { code: "ZW", population: 16300000 },
  { code: "CZ", population: 10800000 },
  { code: "NL", population: 17800000 },
  { code: "BE", population: 11600000 },
  { code: "GR", population: 10400000 },
  { code: "PT", population: 10300000 },
  { code: "HU", population: 9600000 },
  { code: "AT", population: 9100000 },
  { code: "SE", population: 10600000 },
  { code: "NO", population: 5500000 },
  { code: "DK", population: 5900000 },
  { code: "FI", population: 5600000 },
  { code: "IE", population: 5400000 },
  { code: "IL", population: 9900000 },
  { code: "NZ", population: 5200000 },
  { code: "SG", population: 5900000 },
  { code: "AE", population: 9900000 },
  { code: "QA", population: 3000000 },
  { code: "KW", population: 4300000 },
  { code: "OM", population: 4600000 },
  { code: "JO", population: 11100000 },
  { code: "LB", population: 5400000 },
  { code: "CY", population: 1300000 },
  { code: "PS", population: 5400000 },
  { code: "CH", population: 8900000 },
  { code: "RS", population: 6700000 },
  { code: "BG", population: 6600000 },
  { code: "HR", population: 3900000 },
  { code: "SK", population: 5400000 },
  { code: "SI", population: 2100000 },
  { code: "BA", population: 3200000 },
  { code: "AL", population: 2800000 },
  { code: "MK", population: 1900000 },
  { code: "LT", population: 2900000 },
  { code: "LV", population: 1900000 },
  { code: "EE", population: 1350000 },
  { code: "GE", population: 3700000 },
  { code: "AM", population: 3000000 },
  { code: "AZ", population: 10300000 },
  { code: "BY", population: 9400000 },
  { code: "MD", population: 2600000 },
  { code: "BO", population: 12000000 },
  { code: "UY", population: 3500000 },
  { code: "PY", population: 7200000 },
  { code: "EC", population: 18000000 },
  { code: "GT", population: 18000000 },
  { code: "HN", population: 10500000 },
  { code: "SV", population: 6500000 },
  { code: "NI", population: 7000000 },
  { code: "CR", population: 5200000 },
  { code: "PA", population: 4500000 },
  { code: "DO", population: 11100000 },
  { code: "HT", population: 11500000 },
  { code: "CU", population: 11100000 },
  { code: "JM", population: 3000000 },
];

export const POP_BY_CODE: Record<string, number> = Object.fromEntries(
  POPULATIONS.map((p) => [p.code, p.population])
);